{
	"info": {
		"_postman_id": "c420561e-e43d-4c26-8e8f-cc726076c85c",
		"name": "Petstore API Automation",
		"description": "Automated tests for Petstore POST and GET pet APIs covering multiple scenarios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46164659",
		"_collection_link": "https://rivitha.postman.co/workspace/Rivitha's-Workspace~dd6d9cd1-2dab-4ca7-8fc1-efa66fcfe8a9/collection/46164659-c420561e-e43d-4c26-8e8f-cc726076c85c?action=share&source=collection_link&creator=46164659"
	},
	"item": [
		{
			"name": "Create Pet - Valid Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.test(\"Response has pet id\", function () {",
							"    pm.expect(jsonData.id).to.be.a('number');",
							"    pm.expect(jsonData.id).to.be.above(0);",
							"});",
							"// Save petId to environment for chaining",
							"pm.environment.set(\"petId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const MAX_SAFE_PET_ID = 9223372036854775807;\r",
							"const timestamp = Date.now(); \r",
							"const random = Math.floor(Math.random() * 1000); // add some randomness\r",
							"const petId = Number(`${timestamp}${random}`).toString().slice(0, 18); // trim to fit in safe range\r",
							"const finalPetId = parseInt(petId);\r",
							"pm.environment.set(\"petId\", finalPetId);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{petId}},\n  \"name\": \"doggie\",\n  \"photoUrls\": [\"https://example.com/dog.jpg\"],\n  \"status\": \"available\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Pet - Missing Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Expect status 400 or 405 for invalid input\", function () {",
							"    const validStatusCodes = [400, 405];",
							"    const actual = pm.response.code;",
							"",
							"    if (actual === 200) {",
							"        console.warn(\"⚠️ Unexpected 200 OK for invalid data. Swagger API might not validate.\");",
							"    }",
							"",
							"    pm.expect(validStatusCodes).to.include(actual);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"photoUrls\": [\"https://example.com/dog.jpg\"],\n  \"status\": \"available\"\n}"
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Pet - Invalid Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Expect status 400 or 405 for invalid input\", function () {",
							"    pm.expect([400, 405]).to.include(pm.response.code);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\"https://example.com/dog.jpg\"],\n  \"status\": \"invalidstatus\"\n}"
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Pet - Empty Body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 405 or 400\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400, 405]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}"
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Pet - Valid petId",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if(!pm.environment.get(\"petId\")) {",
							"    throw new Error(\"petId environment variable not set. Run 'Create Pet - Valid Data' first.\");",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.test(\"Response pet id matches requested petId\", function () {",
							"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"petId\")));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/{{petId}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"{{petId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Pet - Non-existent petId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/9999999999999",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"9999999999999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Pet - Invalid petId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/abc123",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"abc123"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "petId",
			"value": ""
		}
	]
}